buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}")
    }
}

plugins {
    id "org.springdoc.openapi-gradle-plugin" version "1.9.0"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'

ext['jna.version'] = '5.4.0' //force correct jna version -> springs is not compatible with ilp solver
ext['slf4j.version'] = slf4j_version
ext['okhttp.version'] = okhttp_version

version = siriusFrontendVersion

dependencies {
//    implementation("org.springframework.boot:spring-boot-properties-migrator")
    implementation project(':sirius_cli')
    implementation project(':sirius_gui')

    //////////// configure logging ///////////////////
    //logging bridges
    implementation("org.slf4j:log4j-over-slf4j:$slf4j_version")
    implementation("org.slf4j:jcl-over-slf4j:$slf4j_version")
    implementation("org.slf4j:jul-to-slf4j:$slf4j_version")
    ////////////////////////////////////////////////////

    //////////// Spring (boot) ////////////////////////
    // Default bootJar config
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }

//    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.boot:spring-boot-starter-jetty'

    //spring data for pagination and sorting
    implementation 'org.springframework.data:spring-data-commons'
    implementation "org.springframework.boot:spring-boot-starter-validation"

    // expose operational information about the running application via /actuator
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation "it.unimi.dsi:fastutil:$fastutil_version" //replaces old spring version
    ////////////////////////////////////////////////////

    ////////////////////// API DOC ///////////////////
    // Generate interactive documentation from a Swagger-compliant API
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${springdoc_version}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdoc_version}"

    //process javadoc for swagger/openapi
    annotationProcessor 'com.github.therapi:therapi-runtime-javadoc-scribe:0.15.0'
    implementation 'com.github.therapi:therapi-runtime-javadoc:0.15.0'
    ////////////////////////////////////////////////////

    //must match minio version
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation "jakarta.servlet:jakarta.servlet-api"

    //todo replace with alternative to finally get rid ob guava
    implementation 'com.google.jimfs:jimfs:1.3.0'

    implementation "org.apache.commons:commons-text:$commons_text_version"

    implementation 'org.apache.lucene:lucene-queryparser:10.0.0'
    implementation 'org.apache.lucene:lucene-analysis-common:10.0.0'
}
//todo use logback instead of java util logging! => needs support in jjobs
configurations.each { Configuration conf ->
    //replaced by log4j-over-slf4j
    conf.exclude group: "log4j", module: "log4j"
    //replaced by jcl-over-slf4j
    conf.exclude group: "commons-logging", module: "commons-logging"
    conf.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//    it.exclude group: 'org.slf4j', module: 'logback-classic'
    SiriusPlatform.allBut(siriusTargetPlatform).stream()
            .map { it.inchiClassifier() }.flatMap { it.stream() }
            .forEach { conf.exclude(group: "io.github.dan2097", module: "jna-inchi-$it") }
    if (excludeCbcNative)
        conf.exclude(group: "de.unijena.bioinf.cbc-java", module: "cbc-java-native")

    //remove commercial solver -> given at runtime
    conf.exclude group: "com.gurobi", module: "gurobi-jar"
    conf.exclude group: "cplex", module: "cplex"
//    conf.exclude group: "org.slf4j", module: "slf4j-jdk14"
}

jar {
    enabled = false
}

bootJar {
    archiveClassifier = 'boot'
    layered {
        enabled = true
    }
    launchScript()
}

openApi {
    apiDocsUrl.set("http://localhost:8888/v3/api-docs")
    outputDir.set(file("$projectDir"))
    waitTimeInSeconds.set(20)

    outputFileName = "openapi-spec-enums-as-ref.json"
    customBootRun {
        args = ["rest", "-s", "-p", "8888", "--api-mode", "BASIC", "--enums-as-ref"]
    }
}
forkedSpringBootRun.dependsOn(':sirius_rest_service:bootJar')


tasks.register("generateOpenApiDocsEnumsAsString") {
    description "Creates the api docs with enums treated as strings which seems to be mor compatible with some languages."
    group "openApi"
    doFirst {
        openApi {
            outputFileName = "openapi-spec-enums-as-string.json"
            customBootRun {
                args = ["rest", "-s", "-p", "8888", "--api-mode", "BASIC"]
            }
        }
    }
    finalizedBy "generateOpenApiDocs"
}


// Javadoc cannot recognize lombok builder
javadoc {
    failOnError = false
    enabled = false
}