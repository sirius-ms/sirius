buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath("org.openapitools:openapi-generator-gradle-plugin:7.6.0") {
            exclude group: "com.fasterxml.jackson.core"
            exclude group: "com.fasterxml.jackson.dataformat"
            exclude group: "com.fasterxml.jackson.datatype"
            exclude group: "com.fasterxml.jackson"
        }

        classpath "com.fasterxml.jackson:jackson-bom:2.12.3"
        classpath "com.fasterxml.jackson.core:jackson-core:2.12.3"
        classpath "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.3"
        classpath "com.fasterxml.jackson.datatype:jackson-datatype-guava:2.12.3"
        classpath "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.12.3"
        classpath "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.3"
        classpath "com.fasterxml.jackson.core:jackson-databind:2.12.3"
        classpath "com.fasterxml.jackson.core:jackson-annotations:2.12.3"
    }
}

apply plugin: 'org.openapi.generator'
apply plugin: 'java-library'


allprojects {
    group = 'io.sirius-ms'
    version = "${siriusAPIVersion}+sirius${siriusFrontendVersion}"

    ext {
        reactor_version = "3.4.3"
        reactor_netty_version = "1.1.20"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    licenses {
                        license {
                            name = 'GNU Lesser General Public License, Version 3.0'
                            url = 'https://www.gnu.org/licenses/lgpl-3.0.txt'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "GitLabPublic"
                if (System.getenv("CI_JOB_TOKEN") != null) {
                    url = System.getenv('PUBLIC_REGISTRY_URL')
                    credentials(HttpHeaderCredentials) {
                        name = "Job-Token"
                        value = System.getenv("CI_JOB_TOKEN")
                    }
                    authentication {
                        header(HttpHeaderAuthentication)
                    }
                } else {
                    url = project.findProperty("io.sirius-ms.build.artifactory.public.url") as String
                    credentials(PasswordCredentials) {
                        username = project.findProperty("io.sirius-ms.build.artifactory.username") as String
                        password = project.findProperty("io.sirius-ms.build.artifactory.token") as String
                        // the variable resides in $GRADLE_USER_HOME/gradle.properties
                        // https://docs.gradle.org/current/userguide/directory_layout.html#dir:gradle_user_home
                    }
                    authentication {
                        basic(BasicAuthentication)
                    }
                }
            }
        }
    }
}

dependencies {
    api project(":sirius-sdk:sirius-sdk.openapi")
    api "org.springframework.boot:spring-boot-starter-webflux:$spring_boot_version"
    api "io.projectreactor.netty:reactor-netty-http:$reactor_netty_version"
}

openApiGenerate {
    generatorName.set("java")
    inputSpec.set("$rootDir/sirius_rest_service/openapi-spec-enums-as-ref.json")
    outputDir.set("$projectDir/sirius-sdk.openapi")
    templateDir.set("$projectDir/templates")
    apiPackage.set("io.sirius.ms.sdk.api")
    invokerPackage.set("io.sirius.ms.sdk.client")
    modelPackage.set("io.sirius.ms.sdk.model")
    groupId.set("io.sirius-ms")
    version.set(project.version.toString())
    configFile.set("$projectDir/openapi-gen-config.json")
}