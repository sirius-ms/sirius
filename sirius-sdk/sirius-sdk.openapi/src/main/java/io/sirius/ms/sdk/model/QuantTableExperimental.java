/*
 *  This file is part of the SIRIUS libraries for analyzing MS and MS/MS data
 *
 *  Copyright (C) 2024 Bright Giant GmbH
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along with SIRIUS.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 *  https://openapi-generator.tech
 *  Do not edit the class manually.
 */


package io.sirius.ms.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.sirius.ms.sdk.model.QuantMeasure;
import io.sirius.ms.sdk.model.QuantRowType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * EXPERIMENTAL: This schema is experimental and may be changed (or even removed) without notice until it is declared stable.
 */
@JsonPropertyOrder({
  QuantTableExperimental.JSON_PROPERTY_QUANTIFICATION_MEASURE,
  QuantTableExperimental.JSON_PROPERTY_ROW_TYPE,
  QuantTableExperimental.JSON_PROPERTY_ROW_IDS,
  QuantTableExperimental.JSON_PROPERTY_COLUMN_IDS,
  QuantTableExperimental.JSON_PROPERTY_ROW_NAMES,
  QuantTableExperimental.JSON_PROPERTY_COLUMN_NAMES,
  QuantTableExperimental.JSON_PROPERTY_VALUES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class QuantTableExperimental {
  public static final String JSON_PROPERTY_QUANTIFICATION_MEASURE = "quantificationMeasure";
  private QuantMeasure quantificationMeasure;

  public static final String JSON_PROPERTY_ROW_TYPE = "rowType";
  private QuantRowType rowType;

  public static final String JSON_PROPERTY_ROW_IDS = "rowIds";
  private List<Long> rowIds;

  public static final String JSON_PROPERTY_COLUMN_IDS = "columnIds";
  private List<Long> columnIds;

  public static final String JSON_PROPERTY_ROW_NAMES = "rowNames";
  private List<String> rowNames;

  public static final String JSON_PROPERTY_COLUMN_NAMES = "columnNames";
  private List<String> columnNames;

  public static final String JSON_PROPERTY_VALUES = "values";
  private List<List<Double>> values = new ArrayList<>();

  public QuantTableExperimental() {
  }

  public QuantTableExperimental quantificationMeasure(QuantMeasure quantificationMeasure) {
    
    this.quantificationMeasure = quantificationMeasure;
    return this;
  }

   /**
   * Get quantificationMeasure
   * @return quantificationMeasure
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUANTIFICATION_MEASURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public QuantMeasure getQuantificationMeasure() {
    return quantificationMeasure;
  }


  @JsonProperty(JSON_PROPERTY_QUANTIFICATION_MEASURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuantificationMeasure(QuantMeasure quantificationMeasure) {
    this.quantificationMeasure = quantificationMeasure;
  }

  public QuantTableExperimental rowType(QuantRowType rowType) {
    
    this.rowType = rowType;
    return this;
  }

   /**
   * Get rowType
   * @return rowType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROW_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public QuantRowType getRowType() {
    return rowType;
  }


  @JsonProperty(JSON_PROPERTY_ROW_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRowType(QuantRowType rowType) {
    this.rowType = rowType;
  }

  public QuantTableExperimental rowIds(List<Long> rowIds) {
    
    this.rowIds = rowIds;
    return this;
  }

  public QuantTableExperimental addRowIdsItem(Long rowIdsItem) {
    if (this.rowIds == null) {
      this.rowIds = new ArrayList<>();
    }
    this.rowIds.add(rowIdsItem);
    return this;
  }

   /**
   * Get rowIds
   * @return rowIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROW_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Long> getRowIds() {
    return rowIds;
  }


  @JsonProperty(JSON_PROPERTY_ROW_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRowIds(List<Long> rowIds) {
    this.rowIds = rowIds;
  }

  public QuantTableExperimental columnIds(List<Long> columnIds) {
    
    this.columnIds = columnIds;
    return this;
  }

  public QuantTableExperimental addColumnIdsItem(Long columnIdsItem) {
    if (this.columnIds == null) {
      this.columnIds = new ArrayList<>();
    }
    this.columnIds.add(columnIdsItem);
    return this;
  }

   /**
   * Get columnIds
   * @return columnIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLUMN_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Long> getColumnIds() {
    return columnIds;
  }


  @JsonProperty(JSON_PROPERTY_COLUMN_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColumnIds(List<Long> columnIds) {
    this.columnIds = columnIds;
  }

  public QuantTableExperimental rowNames(List<String> rowNames) {
    
    this.rowNames = rowNames;
    return this;
  }

  public QuantTableExperimental addRowNamesItem(String rowNamesItem) {
    if (this.rowNames == null) {
      this.rowNames = new ArrayList<>();
    }
    this.rowNames.add(rowNamesItem);
    return this;
  }

   /**
   * Get rowNames
   * @return rowNames
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROW_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getRowNames() {
    return rowNames;
  }


  @JsonProperty(JSON_PROPERTY_ROW_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRowNames(List<String> rowNames) {
    this.rowNames = rowNames;
  }

  public QuantTableExperimental columnNames(List<String> columnNames) {
    
    this.columnNames = columnNames;
    return this;
  }

  public QuantTableExperimental addColumnNamesItem(String columnNamesItem) {
    if (this.columnNames == null) {
      this.columnNames = new ArrayList<>();
    }
    this.columnNames.add(columnNamesItem);
    return this;
  }

   /**
   * Get columnNames
   * @return columnNames
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLUMN_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getColumnNames() {
    return columnNames;
  }


  @JsonProperty(JSON_PROPERTY_COLUMN_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColumnNames(List<String> columnNames) {
    this.columnNames = columnNames;
  }

  public QuantTableExperimental values(List<List<Double>> values) {
    
    this.values = values;
    return this;
  }

  public QuantTableExperimental addValuesItem(List<Double> valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<Double>> getValues() {
    return values;
  }


  @JsonProperty(JSON_PROPERTY_VALUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValues(List<List<Double>> values) {
    this.values = values;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuantTableExperimental quantTableExperimental = (QuantTableExperimental) o;
    return Objects.equals(this.quantificationMeasure, quantTableExperimental.quantificationMeasure) &&
        Objects.equals(this.rowType, quantTableExperimental.rowType) &&
        Objects.equals(this.rowIds, quantTableExperimental.rowIds) &&
        Objects.equals(this.columnIds, quantTableExperimental.columnIds) &&
        Objects.equals(this.rowNames, quantTableExperimental.rowNames) &&
        Objects.equals(this.columnNames, quantTableExperimental.columnNames) &&
        Objects.equals(this.values, quantTableExperimental.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantificationMeasure, rowType, rowIds, columnIds, rowNames, columnNames, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuantTableExperimental {\n");
    sb.append("    quantificationMeasure: ").append(toIndentedString(quantificationMeasure)).append("\n");
    sb.append("    rowType: ").append(toIndentedString(rowType)).append("\n");
    sb.append("    rowIds: ").append(toIndentedString(rowIds)).append("\n");
    sb.append("    columnIds: ").append(toIndentedString(columnIds)).append("\n");
    sb.append("    rowNames: ").append(toIndentedString(rowNames)).append("\n");
    sb.append("    columnNames: ").append(toIndentedString(columnNames)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

