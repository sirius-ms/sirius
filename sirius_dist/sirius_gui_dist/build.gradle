import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.InventoryMarkdownReportRenderer
import edu.sc.seis.launch4j.tasks.Launch4jLibraryTask

import java.util.stream.Collectors

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version")
    }
}

plugins {
    id 'com.github.jk1.dependency-license-report' version '2.8'
}

apply plugin: "application"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

version = siriusFrontendVersion

licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
//    outputDir = "$projectDir/build/licenses"

    // Select projects to examine for dependencies.
    // Defaults to current project and all its subprojects
//    projects = [project] + project.subprojects

    // Adjust the configurations to fetch dependencies, e.g. for Android projects. Default is 'runtimeClasspath'
//    configurations = ['implementation']
    // Use 'ALL' to dynamically resolve all configurations:
    // configurations = ALL

    // List the groups ids to exclude from dependency report. Supports regular expressions.
    // For finer granularity, see: excludes.
    excludeGroups = ['cpdetector', 'cplex', 'com.gurobi', 'de.unijena.bioinf.ms', 'de.unijena.bioinf.cbc-java', 'de.unijena.bioinf', 'de.unijena.bioinf.utils']

    // List the ids (in module:name format) to exclude from dependency report. Supports regular expressions.
    // By default excludes is empty.
//    excludes = ['moduleGroup:moduleName']

    // Don't include artifacts of project's own group into the report
    excludeOwnGroup = true

    // Set custom report renderer, implementing ReportRenderer.
    // Yes, you can write your own to support any format necessary.
//    renderers = [new XmlReportRenderer('third-party-libs.xml', 'Back-End Libraries')]
    renderers = [/*new InventoryHtmlReportRenderer(), */ new InventoryMarkdownReportRenderer('licenses.md', "SIRIUS license information", new File(rootDir, "license-overrides.txt"))]

    // Set importers to import any external dependency information, i.e. from npm.
    // Custom importer should implement DependencyDataImporter interface.
//    importers = [new XmlReportImporter('Frontend dependencies', file(frontend_libs.xml))]

    // This is for the allowed-licenses-file in checkLicense Task
    // Accepts File, URL or String path to local or remote file
//    allowedLicensesFile = new File("$projectDir/config/allowed-licenses.json")
    filters = [new LicenseBundleNormalizer(bundlePath: "$rootDir/licence-groups.json")]
}

dependencies {
    implementation project(':sirius_rest_service')
    for (m in javaFX_modules) // add (native) javaFX dependencies to build
        implementation "org.openjfx:$m:$targetCompatibility.+:${siriusTargetPlatform.jfxClassifier().get()}"
    //tests
    implementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation project(':sirius_dist').sourceSets.test.output //needed for the TestLocal tests
}

mainClassName = 'org.springframework.boot.loader.launch.JarLauncher'
//mainClassName = "de.unijena.bioinf.ms.frontend.SiriusGUIApplication"
def mainJar = getRootProject().getChildProjects().get('sirius_rest_service').tasks.getByName('bootJar').outputs.files.singleFile.getName()

application {
    mainClass = project.mainClassName
    applicationDefaultJvmArgs = project.siriusJvmArgs
    executableDir = 'bin'
}


launch4j {
    mainClassName = project.mainClassName
    jar = getLibraryDir() + "\\$mainJar"
    jvmOptions = project.siriusJvmArgs as Set
}

//additional GUI win launcher
tasks.register('createGuiExe', Launch4jLibraryTask) {
    outfile = 'sirius-gui.exe'
    fileDescription = 'SIRIUS graphical user interface'
    headerType = "gui"
    cmdLine = "rest -s --gui"
}
createGuiExe.dependsOn 'launch4j'


startScripts {
    applicationName = "sirius"
    defaultJvmOpts = project.siriusJvmArgs

    doLast {
        // writer sh script
        if (!siriusTargetPlatform.isWin()) {
            def templateBinding = [
                    toolName : "SIRIUS",
                    mainClass: mainClassName
            ]
            def sf = file("${rootDir}/scripts/sirius.sh.templ")
            templateBinding.shell = "sh"
            templateBinding.classPath = "\\\"\$JAR_HOME/*\\\":\\\"\$GUROBI_HOME/lib/gurobi.jar\\\":\\\"\$CPLEX_HOME/lib/cplex.jar\\\""
            templateBinding.javaLibPath = ""
            templateBinding.gurobiHome = "/lib"
            templateBinding.cplexHome = "/bin/x86-64_linux"
            templateBinding.jvmOpts = "${application.applicationDefaultJvmArgs.stream().collect(Collectors.joining(' '))}"
            templateBinding.javaCommand = "\$APP_HOME/runtime/bin/java"
            templateBinding.jarHome = libDir == null ? "\$APP_HOME/app" : libDir

            String script = sf.text
            templateBinding.forEach({ k, v -> script = script.replace("#$k#", v) })
            unixScript.withWriter { it.write(script) }
            unixScript.setExecutable(true, false)
        } else {
            delete(unixScript)
        }

        if (siriusTargetPlatform.isWin()) {
            //reset binding and create windows bat
            def templateBinding = [
                    toolName : "SIRIUS",
                    mainClass: mainClassName
            ]
            // write bat
            def sf = file("${rootDir}/scripts/sirius.bat.templ")
            templateBinding.classPath = "%JAR_HOME%\\*"
            templateBinding.jvmOpts = "${application.applicationDefaultJvmArgs.stream().map({ s -> '"' + s + '"' }).collect(Collectors.joining(" "))}"
            templateBinding.jarHome = libDir == null ? "%APP_HOME%\\app" : libDir
            templateBinding.gurobiJar = "%GUROBI_HOME%\\lib\\gurobi.jar"
            templateBinding.cplexJar = "%CPLEX_HOME%\\lib\\cplex.jar"

            String script = sf.text
            templateBinding.forEach({ k, v -> script = script.replace("#$k#", v) })
            windowsScript.withWriter { it.write(script) }
            windowsScript.setExecutable(true, false)
        } else {
            delete(windowsScript)
        }
    }
}

distributions {
    sirius {
        contents {
            into('app') {
                from(getRootProject().getChildProjects().get('sirius_rest_service').tasks.getByName('bootJar').outputs.files.singleFile)
            }
            if (siriusTargetPlatform.isWin()) {
                from startScripts
                from("${buildDir}/launch4j") {
                    include("*.exe")
                }
                into('ExplorerLicTester') {
                    from("${rootDir}/dist/ExplorerLicTester")
                }
            } else {
                into('bin') {
                    from startScripts
                }
            }
            from("${rootDir}") {
                include('COPYING.txt')
                include('LICENSE.txt')
            }
            from("${buildDir}/reports/dependency-license") {
                include('licenses.md')
            }
            if (includeRuntime) {
                into('runtime'){
                    from {
                        "${parent.tasks.getByName('extractRuntimeImage').outputs.files.singleFile}"
                    }
                }
            }
        }
    }
}

installSiriusDist.dependsOn ':sirius_rest_service:bootJar'
siriusDistZip.dependsOn ':sirius_rest_service:bootJar'
siriusDistTar.dependsOn ':sirius_rest_service:bootJar'

installSiriusDist.dependsOn('generateLicenseReport')
siriusDistZip.dependsOn 'generateLicenseReport'
siriusDistTar.dependsOn 'generateLicenseReport'

installSiriusDist.dependsOn('launch4j')
siriusDistZip.dependsOn('launch4j')
siriusDistTar.dependsOn('launch4j')

installSiriusDist.dependsOn('createGuiExe')
siriusDistZip.dependsOn('createGuiExe')
siriusDistTar.dependsOn('createGuiExe')

if (includeRuntime){
    installSiriusDist.dependsOn parent.tasks.named('extractRuntimeImage')
    siriusDistZip.dependsOn parent.tasks.named('extractRuntimeImage')
    siriusDistTar.dependsOn parent.tasks.named('extractRuntimeImage')
}


buildJpDists.dependsOn 'createChecksums'
buildJpDists.dependsOn 'signDistImage'
buildJpDists.dependsOn 'distImageZip'
if (siriusTargetPlatform.isMac()) {
    buildJpDists.dependsOn 'macNotarize'
}
if (!siriusTargetPlatform.isLinux()) {
    buildJpDists.dependsOn 'signDistInstaller'
    buildJpDists.dependsOn 'distInstaller'
}

// OS specific packaging
distImage {
    enabled = true
    dependsOn installSiriusDist
    runtimeImageDirectory = installSiriusDist.outputs.files.singleFile.toPath().resolve("runtime").toFile()
    inputDir = installSiriusDist.outputs.files.singleFile.toPath().resolve("app").toFile()
    imageName = 'sirius'
    mainClass = mainClassName
    jvmArgs = application.applicationDefaultJvmArgs
    mainJarName = mainJar
    winConsole = true
    macPackageName = 'SIRIUS'
    if (siriusTargetPlatform.isWin()) {
        //HACK additional windows launchers are imported from launch4j, this is just fake to register it for the start menu. must be a valid path but file must not exists
        launchers = ["sirius-gui": "${createGuiExe.outfile}"]
    }
}

distInstaller {
    linuxShortcut = true
}