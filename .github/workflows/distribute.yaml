name: Build and Publish
on:
  push:
    branches:
      - stable
      - master
    #      - stable-service-api
    paths-ignore:
      - '**/README.md'
      - 'sirius_doc/**/*'

jobs:
  distGUI:
    strategy:
      matrix:
#        os: [ ubuntu-latest, windows-latest, macos-latest ]
        os: [ ubuntu-latest, windows-latest]
        targetArchitecture: [amd64, arm64]
        exclude:
          - os: windows-latest
            targetArchitecture: arm64
    runs-on: ${{ matrix.os }}
    env:
      GENERIC_INSTALLER_CERTIFICATE: ${{ secrets.GENERIC_INSTALLER_CERTIFICATE }}
      MACOS_APP_IDENTITY_ID: ${{ secrets.MACOS_APP_IDENTITY_ID }}
      MACOS_IDENTITY_ID: ${{ secrets.MACOS_IDENTITY_ID }}
      MACOS_APPLE_ID: ${{ secrets.MACOS_APPLE_ID }}
      MACOS_APPLE_ID_PW: ${{ secrets.MACOS_APPLE_ID_PW }}
      SIRIUS_USER: ${{ secrets.SIRIUS_USER }}
      SIRIUS_PW: ${{ secrets.SIRIUS_PW }}
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - name: Git LFS Pull
        run: git lfs pull

      - name: Set up JetBrains Runtime with JCEF
        shell: bash
        run: |
          JDK_VERION="21.0.7"
          JBR_VERSION_TAG="b1020.35"

          OS_TYPE=""
          ARCH_TYPE=""
          JBR_DIR_NAME="jbr_jcef_sdk" # Temp directory for extraction

          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            OS_TYPE="linux"
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            OS_TYPE="windows"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            OS_TYPE="osx" # Or "mac" or "macos" - check JetBrains naming for JBR JCEF
          else
            echo "Unsupported OS: ${{ matrix.os }}"
            exit 1
          fi
          # we always build on x64
          ARCH_TYPE="x64"
          # if [[ "${{ matrix.targetArchitecture }}" == "amd64" ]]; then
          #   ARCH_TYPE="x64"
          # elif [[ "${{ matrix.targetArchitecture }}" == "arm64" ]]; then
          #   ARCH_TYPE="aarch64"
          # else
          #   echo "Unsupported architecture: ${{ matrix.targetArchitecture }}"
          #   exit 1
          # fi
          
          JBR_FILE_NAME="jbrsdk_jcef-${JDK_VERION}-${OS_TYPE}-${ARCH_TYPE}-${JBR_VERSION_TAG}.tar.gz"
          JBR_DOWNLOAD_URL_BASE="https://cache-redirector.jetbrains.com/intellij-jbr"
          JBR_DOWNLOAD_URL="${JBR_DOWNLOAD_URL_BASE}/${JBR_FILE_NAME}"

          echo "Attempting to download JBR JCEF from: ${JBR_DOWNLOAD_URL}"
          curl -L -o "${JBR_FILE_NAME}" "${JBR_DOWNLOAD_URL}"
          if [ $? -ne 0 ]; then
            echo "Failed to download JBR JCEF. Please check URL and version."
            exit 1
          fi

          mkdir -p "${JBR_DIR_NAME}"

          echo "Extracting ${JBR_FILE_NAME} to ${JBR_DIR_NAME}"

          tar -xzf "${JBR_FILE_NAME}" -C "${JBR_DIR_NAME}" --strip-components=1
          
          JAVA_HOME_PATH="${PWD}/${JBR_DIR_NAME}"
          # On macOS, the JDK home is often under Contents/Home
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
               JAVA_HOME_PATH="${JAVA_HOME_PATH}/Contents/Home"
          fi

          echo "Effective JAVA_HOME will be: ${JAVA_HOME_PATH}"
          
          # Export for current script execution AND set for subsequent steps
          export JAVA_HOME="${JAVA_HOME_PATH}"
          export PATH="${JAVA_HOME_PATH}/bin:${PATH}"
          
          echo "JAVA_HOME=${JAVA_HOME_PATH}" >> $GITHUB_ENV
          echo "${JAVA_HOME_PATH}/bin" >> $GITHUB_PATH
          
          echo "--- Verifying Java version from new JBR ---"
          echo "JAVA_HOME is: $JAVA_HOME"
          echo "PATH is: $PATH"
          which java
          java -version
          echo "--- Verifying Javac version from new JBR ---"
          which javac
          javac -version || echo "javac not found or not in JCEF JBR variant (this might be okay for some JRE-like JBRs)"
          echo "--- Verification complete ---"


      - name: Load Build properties
        uses: Reedyuk/read-properties@v1.0.1
        id: sirius_version
        with:
          path: './sirius_cli/src/main/resources/sirius_frontend.build.properties'
          property: 'de.unijena.bioinf.siriusFrontend.version'

      - if: ${{ (matrix.os == 'macos-latest') && (env.MACOS_APP_IDENTITY_ID != '') }}
        name: Import Apple APP Code-signing ID and p12
        uses: apple-actions/import-codesign-certs@v1
        with:
          keychain-password: ${{ secrets.MACOS_TMP_KEYCHAIN_PWD }}
          p12-file-base64: ${{ secrets.MACOS_APP_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_APP_CERTIFICATE_PWD }}

      - if: ${{ (matrix.os == 'macos-latest') && (env.MACOS_IDENTITY_ID != '') }}
        name: Import Apple Installer Code-signing ID and p12
        uses: apple-actions/import-codesign-certs@v1
        with:
          create-keychain: false
          keychain-password: ${{ secrets.MACOS_TMP_KEYCHAIN_PWD }}
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}

      - if: matrix.os == 'macos-latest'
        name: Check Identities
        run: /usr/bin/security find-identity

      - name: Gradle Build
#        working-directory: sirius_dist/sirius_gui_dist
        run: |
          chmod +x ./gradlew
          ./gradlew --stacktrace clean sirius_dist:sirius_gui_dist:buildJpDists \
            -P "build.sirius.platform=${{ matrix.os }}-${{ matrix.targetArchitecture }}" \
            -P "build.sirius.starter.jdk.include=true" \
            -P "de.unijena.bioinf.build.MACOS_APP_IDENTITY_ID=${{ secrets.MACOS_APP_IDENTITY_ID }}" \
            -P "de.unijena.bioinf.build.MACOS_IDENTITY_ID=${{ secrets.MACOS_IDENTITY_ID }}" \
            -P "de.unijena.bioinf.build.MACOS_APPLE_ID=${{ secrets.MACOS_APPLE_ID }}" \
            -P "de.unijena.bioinf.build.MACOS_APPLE_ID_PW=${{ secrets.MACOS_APPLE_ID_PW }}" \
            -P "de.unijena.bioinf.build.MACOS_TEAM_ID=${{ secrets.MACOS_TEAM_ID }}"

      - if: matrix.os == 'windows-latest'
        name: Azure Trusted Signing for Widows MSI
        uses: azure/trusted-signing-action@v0.3.16
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ secrets.AZURE_ENDPOINT }}
          code-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}

          # Sign all exes inside the folder
          files-folder: ./sirius_dist/sirius_gui_dist/build/jpDists/
          files-folder-filter: msi
          file-digest: SHA256

      - name: Upload Distributions
        uses: actions/upload-artifact@v4
        with:
          retention-days: 3
          name: "sirius-${{ steps.sirius_version.outputs.value }}-${{ matrix.os }}-${{ matrix.targetArchitecture }}"
          path: |
            ./sirius_dist/sirius_gui_dist/build/jpDists/*.zip
            ./sirius_dist/sirius_gui_dist/build/jpDists/*.msi
            ./sirius_dist/sirius_gui_dist/build/jpDists/*.pkg
            ./sirius_dist/sirius_gui_dist/build/jpDists/*.deb
            ./sirius_dist/sirius_gui_dist/build/jpDists/*.sha256

#  dockergen:
#    needs: [ distGUI ]
#    uses: ./.github/workflows/dockergen.yaml
#    secrets: inherit

  release:
    needs: [distGUI]
#    needs: [ distCLI, distGUI]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - name: Git LFS Pull
        run: git lfs pull
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Load Build properties
        uses: Reedyuk/read-properties@v1.0.1
        id: sirius_version
        with:
          path: './sirius_cli/src/main/resources/sirius_frontend.build.properties'
          property: 'de.unijena.bioinf.siriusFrontend.version'
      - uses: actions/download-artifact@v4.1.7
        with:
          path: sirius_dist/build/tmp/artifacts/
      - name: Display downloaded artifact files
        run: ls -lah
        working-directory: sirius_dist/build/tmp/artifacts/
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "sirius_dist/build/tmp/artifacts/*/*"
          body: |
            ### Prebuilt SIRIUS releases for all supported platforms. 
            
            Package names are made up as follows: `<App Name>-<Version>-<Operating System>-<Flavor>.<PackageType>`. Package types are either generic `.zip` archives or operating system specific installers (e.g. `.pkg` or `.msi`). The flavors describe builds with different features:
            * no _Flavor_ suffix represents for the standard SIRIUS package that contains the Graphical User Interface (GUI), the background service and the Command Line Tool (CLI)
            * [currently not available] `headless` represents a command line only version that does not contain GUI relevant packages. It is smaller and does not need any GUI libraries installed on the users system (good for servers). 
            
            See the [online documentation](https://v6.docs.sirius-ms.io/quick-start/) for details.
          
            Changelog can be found [here](https://v6.docs.sirius-ms.io/changelog/).
          name: "SIRIUS v${{ steps.sirius_version.outputs.value }}"
          tag: "v${{ steps.sirius_version.outputs.value }}"
          prerelease: ${{ endsWith(steps.sirius_version.outputs.value, '-SNAPSHOT') }}
          allowUpdates: ${{ endsWith(steps.sirius_version.outputs.value, '-SNAPSHOT') }}
          #draft: ${{ env.GITHUB_REF_SLUG == 'stable' && 'false' || 'true' }}
          draft: 'true'
          token: ${{ secrets.GITHUB_TOKEN }}

  trigger-client-api-build:
    needs: [ release ]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Actions on sirius-client-openAPI
        run: curl -X POST -H "Authorization:Bearer ${{ secrets.CLIENT_API_REPO_TOKEN }}" -H "Accept:application/vnd.github.v3+json" ${{ vars.CLIENT_API_REPO_URL }} -d '{"ref":"master"}'